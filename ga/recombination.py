import numpy as np
from typing import Callable
from ga.population import Population
from utils.result import Result
from enum import Enum


class RecombinationMethod(Enum):

    MEAN = "mean"
    MAX = "max"
    MIN = "min"


def recombine(
    rng: np.random.Generator,
    method: RecombinationMethod,
    selected_population: Population,
    n_parens: int = 2,
) -> Result[Population, str]:
    """
    Recombines selected parents to generate children in a genetic algorithm.

    Parameters:
    rng : np.random.Generator
        A random number generator instance.
    method : RecombinationMethod
        The recombination method to use.
    selected_population : np.ndarray
        A list of individuals selected as parents.
    n_parens : int
        The number of parents to recombine.

    Returns: np.ndarray
        A numpy structured array containing the children generated by recombination.

    Example:
    >>> import numpy as np
    >>> rng = np.random.default_rng()
    >>> population = np.array([(0, [1, 2], 0.0), (1, [3, 4], 0.0)], dtype=create_individual_dtype(2).value)
    >>> recombine(rng, RecombinationMethod.MEAN, population, 2)
    array([(2, [2., 3.], inf)],
          dtype=[('index', '<i8'), ('point', '<f8', (2,)), ('evaluation', '<f8')])
    """
    match method:
        case RecombinationMethod.MEAN:
            recombination_func = lambda x: np.mean(x, axis=0)
        case RecombinationMethod.MAX:
            recombination_func = lambda x: np.max(x, axis=0)
        case RecombinationMethod.MIN:
            recombination_func = lambda x: np.min(x, axis=0)
        case _:
            return Result.Error("Invalid recombination method")

    if len(selected_population) < 2:
        return Result.Error("Selected population must contain at least 2 individuals")
    if n_parens > len(selected_population):
        return Result.Error("Number of parents exceeds selected population size")
    if n_parens < 2:
        return Result.Error("Number of parents must be at least 2")

    recombination_size = int(np.floor(len(selected_population) / n_parens))
    recombination_pairs = rng.choice(
        selected_population, size=(recombination_size, n_parens), replace=False
    )

    children = np.array(
        [
            (
                max(selected_population["index"]) + idx,
                recombination_func(parent["point"]),
                float("inf"),
            )
            for idx, parent in enumerate(recombination_pairs)
        ],
        dtype=selected_population.dtype,
    )

    return Result.Ok(children)
